// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calebtracey/rugby-data-api/internal/dao/comp (interfaces: MapperI)

// Package compmocks is a generated GoMock package.
package compmocks

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/calebtracey/rugby-data-api/external/models"
	response "github.com/calebtracey/rugby-data-api/external/models/response"
	gomock "github.com/golang/mock/gomock"
)

// MockMapperI is a mock of MapperI interface.
type MockMapperI struct {
	ctrl     *gomock.Controller
	recorder *MockMapperIMockRecorder
}

// MockMapperIMockRecorder is the mock recorder for MockMapperI.
type MockMapperIMockRecorder struct {
	mock *MockMapperI
}

// NewMockMapperI creates a new mock instance.
func NewMockMapperI(ctrl *gomock.Controller) *MockMapperI {
	mock := &MockMapperI{ctrl: ctrl}
	mock.recorder = &MockMapperIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapperI) EXPECT() *MockMapperIMockRecorder {
	return m.recorder
}

// CreatePSQLCompetitionQuery mocks base method.
func (m *MockMapperI) CreatePSQLCompetitionQuery(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePSQLCompetitionQuery", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreatePSQLCompetitionQuery indicates an expected call of CreatePSQLCompetitionQuery.
func (mr *MockMapperIMockRecorder) CreatePSQLCompetitionQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePSQLCompetitionQuery", reflect.TypeOf((*MockMapperI)(nil).CreatePSQLCompetitionQuery), arg0)
}

// MapCompetitionDataResponse mocks base method.
func (m *MockMapperI) MapCompetitionDataResponse(arg0 models.PSQLCompetitionDataList) response.LeaderboardResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapCompetitionDataResponse", arg0)
	ret0, _ := ret[0].(response.LeaderboardResponse)
	return ret0
}

// MapCompetitionDataResponse indicates an expected call of MapCompetitionDataResponse.
func (mr *MockMapperIMockRecorder) MapCompetitionDataResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapCompetitionDataResponse", reflect.TypeOf((*MockMapperI)(nil).MapCompetitionDataResponse), arg0)
}

// MapPSQLRowsToCompetitionData mocks base method.
func (m *MockMapperI) MapPSQLRowsToCompetitionData(arg0 *sql.Rows) models.PSQLCompetitionDataList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapPSQLRowsToCompetitionData", arg0)
	ret0, _ := ret[0].(models.PSQLCompetitionDataList)
	return ret0
}

// MapPSQLRowsToCompetitionData indicates an expected call of MapPSQLRowsToCompetitionData.
func (mr *MockMapperIMockRecorder) MapPSQLRowsToCompetitionData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapPSQLRowsToCompetitionData", reflect.TypeOf((*MockMapperI)(nil).MapPSQLRowsToCompetitionData), arg0)
}
