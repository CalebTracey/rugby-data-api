// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calebtracey/rugby-data-api/internal/dao/psql (interfaces: DAOI)

// Package dbmocks is a generated GoMock package.
package dbmocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDAOI is a mock of DAOI interface.
type MockDAOI struct {
	ctrl     *gomock.Controller
	recorder *MockDAOIMockRecorder
}

// MockDAOIMockRecorder is the mock recorder for MockDAOI.
type MockDAOIMockRecorder struct {
	mock *MockDAOI
}

// NewMockDAOI creates a new mock instance.
func NewMockDAOI(ctrl *gomock.Controller) *MockDAOI {
	mock := &MockDAOI{ctrl: ctrl}
	mock.recorder = &MockDAOIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAOI) EXPECT() *MockDAOIMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockDAOI) FindAll(arg0 context.Context, arg1 string) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockDAOIMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDAOI)(nil).FindAll), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockDAOI) InsertOne(arg0 context.Context, arg1 string) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockDAOIMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockDAOI)(nil).InsertOne), arg0, arg1)
}
