// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calebtracey/rugby-data-api/internal/dao/psql (interfaces: MapperI)

// Package dbmocks is a generated GoMock package.
package dbmocks

import (
	sql "database/sql"
	reflect "reflect"

	dtos "github.com/calebtracey/rugby-models/pkg/dtos"
	leaderboard "github.com/calebtracey/rugby-models/pkg/dtos/leaderboard"
	models "github.com/calebtracey/rugby-models/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMapperI is a mock of MapperI interface.
type MockMapperI struct {
	ctrl     *gomock.Controller
	recorder *MockMapperIMockRecorder
}

// MockMapperIMockRecorder is the mock recorder for MockMapperI.
type MockMapperIMockRecorder struct {
	mock *MockMapperI
}

// NewMockMapperI creates a new mock instance.
func NewMockMapperI(ctrl *gomock.Controller) *MockMapperI {
	mock := &MockMapperI{ctrl: ctrl}
	mock.recorder = &MockMapperIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapperI) EXPECT() *MockMapperIMockRecorder {
	return m.recorder
}

// AllLeaderboardDataToResponse mocks base method.
func (m *MockMapperI) AllLeaderboardDataToResponse(arg0 models.PSQLLeaderboardDataList) leaderboard.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllLeaderboardDataToResponse", arg0)
	ret0, _ := ret[0].(leaderboard.Response)
	return ret0
}

// AllLeaderboardDataToResponse indicates an expected call of AllLeaderboardDataToResponse.
func (mr *MockMapperIMockRecorder) AllLeaderboardDataToResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllLeaderboardDataToResponse", reflect.TypeOf((*MockMapperI)(nil).AllLeaderboardDataToResponse), arg0)
}

// LeaderboardByIdQuery mocks base method.
func (m *MockMapperI) LeaderboardByIdQuery(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardByIdQuery", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// LeaderboardByIdQuery indicates an expected call of LeaderboardByIdQuery.
func (mr *MockMapperIMockRecorder) LeaderboardByIdQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardByIdQuery", reflect.TypeOf((*MockMapperI)(nil).LeaderboardByIdQuery), arg0)
}

// LeaderboardDataToResponse mocks base method.
func (m *MockMapperI) LeaderboardDataToResponse(arg0, arg1 string, arg2 models.PSQLLeaderboardDataList) dtos.CompetitionLeaderboardData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaderboardDataToResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(dtos.CompetitionLeaderboardData)
	return ret0
}

// LeaderboardDataToResponse indicates an expected call of LeaderboardDataToResponse.
func (mr *MockMapperIMockRecorder) LeaderboardDataToResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaderboardDataToResponse", reflect.TypeOf((*MockMapperI)(nil).LeaderboardDataToResponse), arg0, arg1, arg2)
}

// RowsToLeaderboardData mocks base method.
func (m *MockMapperI) RowsToLeaderboardData(arg0 *sql.Rows) (models.PSQLLeaderboardDataList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsToLeaderboardData", arg0)
	ret0, _ := ret[0].(models.PSQLLeaderboardDataList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowsToLeaderboardData indicates an expected call of RowsToLeaderboardData.
func (mr *MockMapperIMockRecorder) RowsToLeaderboardData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsToLeaderboardData", reflect.TypeOf((*MockMapperI)(nil).RowsToLeaderboardData), arg0)
}
